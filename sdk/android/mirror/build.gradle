plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.21'
}

android {
    namespace 'mirror.java'
    compileSdk 34

    defaultConfig {
        minSdk 29
        ndk {
            abiFilters 'arm64-v8a'
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                cppFlags ''
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

cargo {
    profile = 'release'
    apiLevel = 29
    verbose = true
    prebuiltToolchains = true
    pythonCommand = 'python3'
    module  = '../../../exports'
    libname = 'mirror-exports'
    targets = ['arm64']
    targetDirectory = '../../../target'
    targetIncludes = ['libmirror_exports.so']
    exec { spec, toolchain ->
        def absolutePath = project.file('../../../target').absolutePath
        spec.environment("CARGO_TARGET_DIR", "$absolutePath")
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'com.ensarsarajcic.kotlinx:serialization-msgpack:0.5.5'
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
}